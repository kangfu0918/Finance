# -*- coding: utf-8 -*-
"""Session 3 - Stock Price Predict - LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nrZ1_8fCmN3xbT3sqns7GHAIcUsPsfMa

# Can We Predict the Stock Price Movement in the Future?
YOu can read the article explaining how LSTM works [here](https://web.stanford.edu/class/cs379c/archive/2018/class_messages_listing/content/Artificial_Neural_Network_Technology_Tutorials/OlahLSTM-NEURAL-NETWORK-TUTORIAL-15.pdf)

## Is the stock a random walk?

## Long Short Term Memory

1. Import the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import math

import pandas_datareader as web
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM

"""2. Download the data from yahoo. We use ANZN"""

df=web.DataReader('AMZN', 'yahoo', start='2012-01-01', end='2022-02-10')

df

df.shape

"""3. Visualize"""

plt.figure(figsize=(12,8))
plt.title('Close Price History')
plt.plot(df['Close'], lw=1)
plt.xlabel('Date')
plt.ylabel('Stock Price ($)')

data=df.filter(['Close'])

"""4. Prepare the data"""

#convert to numpy aarray
#We use 80 of the data for training
train_pct=0.8  
dataset=data.values
train_data_len=math.ceil(len(dataset)*train_pct)

#Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)

"""### The window we use is n_period as input"""

n_period=60
#training dataset
train_data=scaled_data[0:train_data_len]
x_train=[]
y_train=[]

for i in range(n_period, len(train_data)):
    x_train.append(train_data[i-n_period:i,0])
    y_train.append(train_data[i,0])

x_train[0:2]

y_train[:1]

#Convert numpy array
x_train, y_train=np.array(x_train), np.array(y_train)

x_train.shape

x_train=np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))
x_train.shape

"""5. Train the model
Adam optimization is a stochastic gradient descent method that is based on adaptive estimation of first-order and second-order moments.
loss function is chosen as mean_squared_error'
"""

#Build the LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train,y_train, batch_size=1, epochs=1)

#Test
test_data=scaled_data[train_data_len-60:,:]
x_test=[]
y_test=dataset[train_data_len:,:]

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i,0])
    
               
x_test=np.array(x_test)
x_test=np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

x_test.shape

"""6. Prediction error"""

predictions=model.predict(x_test)

predictions=scaler.inverse_transform(predictions)

predictions.shape

#RMSE
rmse=np.sqrt(np.mean(predictions-y_test)**2)
rmse

#plot the result
train=data[:train_data_len]
valid=data[train_data_len:]
valid=valid.assign(Predictions=predictions)
plt.figure(figsize=(12,8))
plt.title('Model')
plt.xlabel('Date')
plt.ylabel('Stock Price ($)')
plt.plot(train['Close'], lw=1)
plt.plot(valid[['Close','Predictions']], lw=1)
plt.legend(['Train','Validation', 'Prediction'],loc='lower right')
plt.show()

valid

#get the quote
quote=web.DataReader('AMZN', 'yahoo', '2012-01-01', '2022-02-17')

quote

quote_df=quote.filter(['Close'])

quote_df

#last 60 days
last_60_days=quote_df[-60:].values
last_60_days_scaled=scaler.transform(last_60_days)

X_test=[]
X_test.append(last_60_days_scaled)
X_test=np.array(X_test)
X_test=np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))
predicted_price=model.predict(X_test)
predicted_prce=scaler.inverse_transform(predicted_price)
print(predicted_prce)

#get the quote
web.DataReader('AMZN', 'yahoo', '2022-02-18', '2022-02-18')

"""### Group Assignment:
In the example, we use the last 60 day's price to predict the closing price for next day.  Modify the program to perform the following task:
- Use past 60 days price to predict the price in one week (5 days). You can choose any stock.
- Use your prediction to generate trading signals for the testing periodd (20% of you dataset):  if the predicted price is higher than the current price (you can specify a threshold) , you should buy one share; if it is lower than the current preice, you can short one share.
- Assume that you will always close your position in onw week, caculate your accumaltaed PnL for testing data

"""

