# -*- coding: utf-8 -*-
"""Session 1 - Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TzXSSH6Jq2REM8VyP1U7-VtrkZfL30nU

# Yahoo Finance
Stock Index, eg, ^GSPC
Curreny Exchange rate, e.g, GBPUSD=X
Options,
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

import yfinance as yf

#single Stock
apple = yf.download('AAPL', 
                       start='2000-01-01', 
                       end='2021-12-31')

apple.head()

"""# You can also gey other stock data, eg, minute-by-minute, or monthly ..."""

#Several stocks
tickers =['AAPL','AMZN','GOOGL','FB', 'MCD', 'GM', 'TSLA','PFE']

start_date='2000-01-01'
end_date='2021-12-31'

df_yf=yf.download(
        # tickers list or string as well
        tickers,

        # use "period" instead of start/end
        # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
        # (optional, default is '1mo')
        period = "ytd",

        # fetch data by interval (including intraday if period < 60 days)
        # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
        # (optional, default is '1d')
        interval = "1d",

        # group by ticker (to access via data['SPY'])
        # (optional, default is 'column')
        group_by = 'ticker',

        # adjust all OHLC automatically
        # (optional, default is False)
        #auto_adjust = True,

        # download pre/post regular market hours data
        # (optional, default is False)
        prepost = True,

        # use threads for mass downloading? (True/False/Integer)
        # (optional, default is True)
        threads = True,

        # proxy URL scheme use use when downloading?
        # (optional, default is None)
        proxy = None
    )

df_yf.head

df_yf.GOOGL['Adj Close'].plot(figsize=(12,8))

df_yf=yf.download('GOOGL', start_date, end_date)

df_yf.head

df_yf['Adj Close'].plot(figsize=(12,8))

"""# You can also use pandas_datareader"""

from pandas_datareader import data

# Fetch daily data for 4 years
symbol='GOOG'
start_date = '2000-01-01'
end_date = '2021-12-31'

df_pd = data.DataReader(symbol, 'yahoo', start_date, end_date)
df_pd.head()

df_yf['Adj Close'].plot(figsize=(12,8))

"""# You can also get company info"""

aapl=yf.Ticker('AAPL')

aapl.info

aapl.history(period="max")

"""# List the dividend payments and stock splits:  corporate action"""

aapl.actions

aapl.dividends

aapl.splits

"""# PE ratio, etc"""

aapl.info['forwardPE']

aapl.info['trailingPE']

"""# Download Futures Price """

data = yf.download("CLK22.NYM CLK23.NYM, CLK24.NYM", start="2015-01-01", end="2022-02-18") 
data['Close'].plot(figsize=(12,8))

#May 2020 Crude Oil Futures
#data = yf.download("CLK20.NYM")
#data.head

"""# Download options data using the yfinance
## First, let us look at what maturity dates are traded
"""

#expiry dates for options for a particular ticker 
aapl.options

#Also allook at SP500 
spx=yf.Ticker('^SPX')
spx.info

spx.options

#Options expiring on a particular date - OPtion Chain
opt_chain = aapl.option_chain(date='2022-08-19')
opt_chain

opt_chain.calls

plt.plot(opt_chain.calls.strike, opt_chain.calls.lastPrice)
plt.xlabel('Strike Price')
plt.ylabel('Call OP\ption Price')
plt.show()

opt_chain.puts

plt.plot(opt_chain.puts.strike, opt_chain.puts.lastPrice)
plt.xlabel('Strike Price')
plt.ylabel('Put Option Price')
plt.show()

"""# Quandl
First, let's start by importing some libraries. 
"Quandl" allows us to get data from NASDAQ
You need to get an API key on Quandl's website. Sign-up and getting an API key is free but has some limits. As a logged-in free user, you will be able to call 2,000 calls per 10 minutes maximum (speed limit), and 50,000 calls per day (volume limit). https://www.quandl.com/  (which will lead you to https://data.nasdaq.com/)

The stocks selected for this example are Apple, Amazon, Google, Facebook, MacDonald, General MOtor, Tesla, and Pfizer, . Below code block will get daily adjusted closing price of each stock
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd  
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import quandl

quandl.ApiConfig.api_key = 'PNzc8CxVBCyfmzjfFqaz'
stocks = ['AAPL','AMZN','GOOGL','FB', 'MCD', 'GM', 'TSLA','PFE']
df_quandl = quandl.get_table('WIKI/PRICES', ticker = stocks,
                   date = { 'gte': '2016-1-1', 'lte': '2021-12-31' }, paginate=True)
df_quandl.head()

df = df_quandl.set_index('date')
table = df.pivot(columns='ticker')
# By specifying col[1] in below list comprehension
# You can select the stock names under multi-level column
table.columns = [col[1] for col in table.columns]
table.head()

quandl.ApiConfig.api_key = 'PNzc8CxVBCyfmzjfFqaz'
stocks = ['AAPL','AMZN','GOOGL','FB', 'MCD', 'GM', 'TSLA','PFE']
df_quandl = quandl.get_table('WIKI/PRICES', ticker = stocks,
                        qopts = { 'columns': ['date', 'ticker', 'adj_close'] },
                        date = { 'gte': '2016-1-1', 'lte': '2021-12-31' }, paginate=True)
df_quandl.head()

df_aapl = quandl.get(dataset='WIKI/AAPL',
                       start_date='2000-01-01', 
                       end_date='2010-12-31')
df_aapl.Close.plot()

"""# For the Data available at, see https://data.nasdaq.com/

# Example 1: WTI Crude Oil prices
from the United States department of Energy
"""

data = quandl.get('EIA/PET_RWTC_D', start_date='2000-01-01',end_date='2021-12-31')

data.plot(figsize=(12, 8))

"""# Example 2: US GDP Data"""

gdp=quandl.get('FRED/GDP')
               #,start_date='2000-01-01',end_date='2021-12-31')

gdp.plot(figsize=(12, 8))

"""# You can also download option data. Here is the volatility data"""

option=quandl.get("OWF/NYM_CL_CL_Q2020_IVS", authtoken="8-SWowzg4o9qAapnWmgq")

option

"""# Let us compare US GDP with SP 500DP"""

spx=yf.download('^GSPC', start='1984-01-01',end='2021-12-31', interval='3mo' )
gdp=quandl.get('FRED/GDP',start_date='1984-01-01',end_date='2021-12-31')

spx

gdp

data=spx.join(gdp).dropna()

data

data.drop(columns=['Open','High','Low','Close','Volume'], inplace=True)

data

"""For a times series $S_1, S_2, \cdots, S_T$, we write the single period return as 
$r_t=\ln\frac{S_t}{S_{t-1}}$. The total return over the time period will be
$r_1+r_2+\cdots+r_T$  
"""

data.rename(columns={'Adj Close':'S&P500', 'Value':'US GDP'}, inplace=True)
growth=np.log(data/data.shift(1)).cumsum().plot(figsize=(12,8))
plt.title('Cumulative Growth')
plt.show()

"""## Group Assignment Question 1
From the above graph, we can see S&P 500 index growths much faster than GDP. Can you state this observation in economical term?  What might be the possible explanation?

# Getting data from Intrinio
1. Import the libraries:
"""

import intrinio_sdk
import pandas as pd

"""2. Authenticate using the personal API key and select the API:"""

intrinio_sdk.ApiClient().configuration.api_key['api_key'] = '{key}'  # replace {key} with your own API key  
security_api = intrinio_sdk.SecurityApi()

"""3. Request the data:"""

r = security_api.get_security_stock_prices(identifier='AAPL', 
                                           start_date='2000-01-01',
                                           end_date='2021-12-31', 
                                           frequency='daily',
                                           page_size=10000)

"""4. Convert the results into a DataFrame:"""

response_list = [x.to_dict() for x in r.stock_prices]
df_intrinio = pd.DataFrame(response_list).sort_values('date')
df_intrinio.set_index('date', inplace=True)
df_intrinio.head

"""# Other sources
For Example:  CRSP using the WRDS service (not free)
"""

import wrds
db = wrds.Connection(wrds_username='wsuo')
dji=db.raw_sql('SELECT date,dji FROM djones.djdaily')

dji

"""#  Stock Indices
 
 ## Dow-Jones Industrial Average
"""

import pandas as pd

# There are 2 tables on the Wikipedia page,  we want the second table
#First table: description

components = \
pd.read_html('https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average#Components')

first_table = components[0]
second_table = components[1]
df = second_table
df

"""# Market Cap"""

for symbol in df['Symbol']:
    sys=symbol.replace('.', '-')  #BRk.B --> BRK-B
    info = yf.Ticker(sys).info
    marketcap = info['marketCap']    
    print(symbol, 'Market Cap: ', marketcap)

dd=pd.DataFrame(df)['Index weighting'].str.replace('%','')
pd.to_numeric(dd).sum()

df[['Company', 'Symbol']]

"""# Last Close price"""

import yfinance as yf

for symbol in df['Symbol']:
    ticker_yahoo = yf.Ticker(symbol)
    data = ticker_yahoo.history(period='1d')
    last_quote = (data.tail(1)['Close'].iloc[0])
    print(symbol,round(last_quote,2))

"""## S&P 500 Stocks Composite Index"""

import pandas as pd

# There are 2 tables on the Wikipedia page, we want the first table
# second table shows the evolution of the changes

components = \
pd.read_html('https://en.wikipedia.org/wiki/List_of_S&P_500_companies')

first_table = components[0]
second_table = components[1]
sp_df = first_table
sp_df

sp_df[200:250]

yf.Ticker('INFO').history(period='1d')['Close']

"""# Last Closing Price"""

import warnings
warnings.filterwarnings("ignore")

## For some reason INFO has no data

SP500_Current_Price=[]

for symbol in sp_df['Symbol']:
    try:
    #if symbol != 'INFO':
        sym=symbol.replace('.', '-')  #For dual shares, eg, BRK.B, we have to change it to BRK-B
        ticker_yahoo = yf.Ticker(sym)
        data = ticker_yahoo.history(period='1d')
        last_quote = (data.tail(1)['Close'].iloc[0])
        SP500_Current_Price.append(
            {
                #     'Company':sym['Security'],
                "Ticker":sym,
                "Last Closing":last_quote
            }
        )
    except:
        pass
    
SP500_Current_Price=pd.DataFrame(SP500_Current_Price)
            
    #print(symbol,round(last_quote,2))

SP500_Current_Price[:20]

"""# List of PE"""

aapl=yf.Ticker('AES')
aapl.info['trailingPE']

##Warning:  This takes a LONG time to run

SP500_PE=[]


for symbol in sp_df['Symbol']:
    try:
    #if symbol not in ['INFO', 'AES']:
        sym=symbol.replace('.', '-')  #For dual shares, eg, BRK.B, we have to change it to BRK-B
        ticker_yahoo = yf.Ticker(sym)
        print(symbol,round(ticker_yahoo.info['forwardPE'],2))
        SP500_PE.append(
            {
                "Ticker":sym,
                "trainlingPE":ticker_yahoo.info['trailingPE']
            }
        )
    except:
        pass
    
SP500_PE=pd.DataFrame(SP500_PE)
    
    #    print(symbol,round(ticker_yahoo.info['forwardPE'],2))

"""## Group Assignment Question 2.  
Lsit the S&P 500 companies that has the top 5 highest trailingPE, and the top 5 forwardPE.  Pick one of the companies on each case and exaplain if there is anything unsual about the company in the past year.

Repeat the exercise for the 5 lowest ratios.
"""

